#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
import time
import sys
import getopt
import logging
import psutil
import signal
from datetime import date, datetime, time, timedelta
from common import constants as constant
from ConfigReader import configuration
from Server import daemon


def printHelp():
	print ("Usage: ./mainServer <action> <options>")
	print ("Actions:")
	print ("  start              Start the DBImport Main server")
	print ("  stop               Stop the DBImport Main server")
	print ("  restart            Restart the DBImport Main server")
	print ("  status             Check status of DBImport Main server")
	print ("")
	print ("Options:")
	print ("  --help             Show this help message and exit")
	print ("  -v, --debug        Turn on extensive debug output.")
	print ("  -V, --version      Displays the version of DBImport")
	sys.exit(1)

def setupLogger(name, logfile, logFormat, loggingLevel, logPropagate=True):
	newLogger = logging.getLogger(name)
	newLogger.propagate = logPropagate
	logHandler = logging.FileHandler(logfile)
	logHandler.setFormatter(logging.Formatter(logFormat))
	logHandler.setLevel(loggingLevel)
	newLogger.addHandler(logHandler)

def main(argv):

	if argv == []:
		printHelp()

	try:
		action = sys.argv[1]
		opts, args = getopt.getopt(argv[1:], "vVh", ["version", "help", "debug"])
	except getopt.GetoptError:
		printHelp()

	loggingLevel = logging.INFO
	displayVersion = False

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			printHelp()
		elif opt in ("-V", "--version"):
			displayVersion = True
		elif opt in ("-v", "--debug"):
			loggingLevel = logging.DEBUG

	if displayVersion == True:
		print("DBImport version: %s"%(constant.VERSION))
		sys.exit(0)

	logdir = configuration.get("Server", "logdir")
	pidfile = configuration.get("Server", "pidfile")
	if configuration.get("Server", "distCP_separate_logs").lower() == "true":
		distCP_separate_logs = True
	else:
		distCP_separate_logs = False

	# Initiate the logging functions with the correct level
	if   loggingLevel == logging.DEBUG and action == "noDaemon":	logFormat = '%(asctime)s %(levelname)s %(name)s %(funcName)s - %(message)s'
	elif loggingLevel == logging.DEBUG and action != "noDaemon":	logFormat = '%(asctime)s %(levelname)s %(funcName)s - %(message)s'
	elif loggingLevel != logging.DEBUG and action == "noDaemon":	logFormat = '%(asctime)s %(levelname)s %(name)s - %(message)s'
	elif loggingLevel != logging.DEBUG and action != "noDaemon":	logFormat = '%(asctime)s %(levelname)s - %(message)s'

	if action == "noDaemon":
		logging.basicConfig(stream=sys.stdout, format=logFormat, level=loggingLevel)
		logPropagate = True
	else:
		# If we run in daemon mode, we log everything from the root logger to /dev/null.
		logging.basicConfig(filename="/dev/null", format=logFormat, level=loggingLevel)
		logPropagate = False

	# Setup the loggers
	setupLogger(name="server", logfile="%s/dbimport_server.log"%(logdir), logFormat=logFormat, loggingLevel=loggingLevel, logPropagate=logPropagate)
	setupLogger(name="atlasDiscovery", logfile="%s/atlasDiscovery.log"%(logdir), logFormat=logFormat, loggingLevel=loggingLevel, logPropagate=logPropagate)
	setupLogger(name="restServer", logfile="%s/restServer.log"%(logdir), logFormat=logFormat, loggingLevel=loggingLevel, logPropagate=logPropagate)
	setupLogger(name="werkzeug", logfile="%s/restServer.log"%(logdir), logFormat=logFormat, loggingLevel=loggingLevel, logPropagate=logPropagate)
	setupLogger(name="waitress", logfile="%s/restServer.log"%(logdir), logFormat=logFormat, loggingLevel=loggingLevel, logPropagate=logPropagate)

	if distCP_separate_logs == False: 
		distCPlogfile = "%s/distCP.log"%(logdir)
		setupLogger(name="distCP", logfile=distCPlogfile, logFormat=logFormat, loggingLevel=loggingLevel)
	else:
		distCPthreads = int(configuration.get("Server", "distCP_threads"))

		for threadID in range(0, distCPthreads):
			distCPlogName = "distCP-thread%s"%(str(threadID))
			distCPlogfile = "%s/distCP-thread%s.log"%(logdir, str(threadID))
			setupLogger(name=distCPlogName, logfile=distCPlogfile, logFormat=logFormat, loggingLevel=loggingLevel)

	d = daemon.serverDaemon(pidfile=pidfile)
	d.setConfig(action=action, logFormat=logFormat)

	if action == "start":
		print("Starting DBImport Main Server")
		d.start()
	elif action == "noDaemon":
		d.run()
	elif action == "stop":
		print("Stopping DBImport Main Server")
		d.stop()
	elif action == "restart":
		d.restart()
	elif action == "status":
		if os.path.isfile(pidfile):
			f = open(pidfile, "r")
			pid=int(f.readline().strip())
			f.close

			if psutil.pid_exists(pid):
				print("DBImport Main Server is running with pid %s"%(pid))
				sys.exit(0)
			else:
				print("DBImport Main Server is not running")
				sys.exit(1)
		else:
			print("DBImport Main Server is not running")
			sys.exit(1)
	else:
		printHelp()


if __name__ == "__main__":
	try:
		main(sys.argv[1:])
	except getopt.GetoptError:
		printHelp()

